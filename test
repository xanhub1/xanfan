local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humRoot = character:WaitForChild("HumanoidRootPart")
local mouse = player:GetMouse()
local uis = game:GetService("UserInputService")

local STEP_TIME = 0.05
local SPEED = 90
local MAX_FORCE = math.huge
local STOP_DISTANCE = 5
local moving = false
local TouchingFloor = nil
local TouchingFloor2 = nil

local Floor1 = nil
local Floor2 = nil
local PlayerBase = nil

-- Find PlayerBase
do
	local displayName = player.DisplayName .. "'s Base"
	for _, plot in pairs(workspace.Plots:GetChildren()) do
		local plotSign = plot:FindFirstChild("PlotSign")
		if plotSign and plotSign:FindFirstChild("SurfaceGui") then
			local gui = plotSign.SurfaceGui
			local label = gui:FindFirstChild("Frame") and gui.Frame:FindFirstChild("TextLabel")
			if label and label.Text == displayName then
				PlayerBase = plot:FindFirstChild("Spawn")
				break
			end
		end
	end
end

-- Constant raycast check for current floor
-- Constant raycast check for current floor
-- Constant raycast check for current floor
task.spawn(function()
	while true do
		task.wait(0.5)

		local rayParams = RaycastParams.new()
		rayParams.FilterDescendantsInstances = {character}
		rayParams.FilterType = Enum.RaycastFilterType.Blacklist

		local result = workspace:Raycast(humRoot.Position, Vector3.new(0, -10, 0), rayParams)

		if result and result.Instance then
			for _, plot in pairs(workspace.Plots:GetChildren()) do
				local decorations = plot:FindFirstChild("Decorations")
				local laserbox = plot:FindFirstChild("LaserHitbox")
				local model = decorations and decorations:FindFirstChild("Model")
				local secondfloor = laserbox and laserbox:FindFirstChild("SecondFloor")

				if decorations and result.Instance:IsDescendantOf(decorations) then
					local children = decorations:GetChildren()

					if children[31] == result.Instance then
						Floor2 = secondfloor or children[31]
						TouchingFloor = Floor2
						TouchingFloor2 = children[16]
						print("Touching Floor2:", Floor2.Name)
					elseif model and result.Instance:IsDescendantOf(model) then
						Floor1 = children[11]
						TouchingFloor = Floor1
						print("Touching Floor1 (Model):", Floor1.Name)
					else
						TouchingFloor = nil
						TouchingFloor2 = nil
					end
					break
				end
			end
		end
	end
end)




-- Teleport Function
local function teleportStepByStep(targetPos)
	if moving then return end
	moving = true

	local attachment = Instance.new("Attachment", humRoot)
	local lv = Instance.new("LinearVelocity")
	lv.Attachment0 = attachment
	lv.MaxForce = MAX_FORCE
	lv.RelativeTo = Enum.ActuatorRelativeTo.World
	lv.VectorVelocity = Vector3.zero
	lv.Parent = humRoot

	while moving do
		local diff = targetPos - humRoot.Position
		local dist = diff.Magnitude
		if dist <= STOP_DISTANCE then break end
		lv.VectorVelocity = diff.Unit * SPEED
		task.wait(STEP_TIME)
	end

	moving = false
	lv:Destroy()
	attachment:Destroy()
end

-- Keybind to teleport
uis.InputBegan:Connect(function(input, gameProcessed)
	if not gameProcessed and input.KeyCode == Enum.KeyCode.V then
		if PlayerBase then
			-- Lift player up first
			local liftA = Instance.new("Attachment", humRoot)
			local liftLV = Instance.new("LinearVelocity")
			liftLV.Attachment0 = liftA
			liftLV.MaxForce = MAX_FORCE
			liftLV.RelativeTo = Enum.ActuatorRelativeTo.World
			liftLV.VectorVelocity = Vector3.new(0, 60, 0)
			liftLV.Parent = humRoot

			local startY = humRoot.Position.Y
			repeat task.wait() until humRoot.Position.Y > startY + 1

			liftLV:Destroy()
			liftA:Destroy()

			if TouchingFloor then

				print("test")
				teleportStepByStep(TouchingFloor.Position + Vector3.new(0, 5, 0))
				if TouchingFloor2 then
					teleportStepByStep(TouchingFloor2.Position + Vector3.new(0, 5, 0))
				end
			end
			-- Step 2: then go to PlayerBase
			teleportStepByStep(PlayerBase.Position + Vector3.new(0, 5, 0))
		end
	end
end)
